{
  "abi": "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_PERCENTAGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"asset\",\"inputs\":[],\"outputs\":[{\"name\":\"assetTokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"convertToAssets\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"assetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"convertToShares\",\"inputs\":[{\"name\":\"assetAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"exposed_setToken\",\"inputs\":[{\"name\":\"newAsset\",\"type\":\"address\",\"internalType\":\"contract IERC20\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleMember\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleMemberCount\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contract IERC20\"},{\"name\":\"taxPercent\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"maxRedeem\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxWithdraw\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewDeposit\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewMint\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewRedeem\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewWithdraw\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"totalManagedAssets\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Deposit\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExceededMaxRedeem\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"shares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ExceededMaxWithdraw\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAssetAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
  "absolutePath": "FloppyVault.sol",
  "address": "0x9B137463d4E7986D7f535f9B79e28b4EF1938E9b",
  "ast": "",
  "blockNumber": 30231909,
  "bytecode": "\"0x6080604052348015600f57600080fd5b506000805460ff1916905560206024565b60d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560735760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b612171806100e36000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80636e553f6511610160578063b3d7f6b9116100d8578063ce96cb771161008c578063d905777e11610071578063d905777e146105b4578063dd62ed3e146105c7578063ef8b30f71461056857600080fd5b8063ce96cb771461058e578063d547741f146105a157600080fd5b8063ba087652116100bd578063ba08765214610555578063c6e6f59214610568578063ca15c8731461057b57600080fd5b8063b3d7f6b9146102ea578063b460af941461054257600080fd5b806391d148541161012f57806395d89b411161011457806395d89b411461051f578063a217fddf14610527578063a9059cbb1461052f57600080fd5b806391d14854146104d357806394bf804d1461050c57600080fd5b80636e553f651461045d57806370a08231146104705780638456cb59146104b85780639010d07c146104c057600080fd5b8063248a9ca31161020e5780633f4ba83a116101c25780634cdad506116101a75780634cdad506146104025780634d7e4c61146104155780635c975abb1461045257600080fd5b80633f4ba83a146103f05780634c255c97146103f857600080fd5b8063313ce567116101f3578063313ce567146103a957806336568abe146103b857806338d52e0f146103cb57600080fd5b8063248a9ca3146103725780632f2ff15d1461039657600080fd5b8063095ea7b3116102655780631794bb3c1161024a5780631794bb3c1461032357806318160ddd1461033857806323b872dd1461035f57600080fd5b8063095ea7b3146102fd5780630a28a4771461031057600080fd5b806301e1d1141461029757806301ffc9a7146102b257806306fdde03146102d557806307a2d13a146102ea575b600080fd5b61029f61061f565b6040519081526020015b60405180910390f35b6102c56102c0366004611bf5565b6106aa565b60405190151581526020016102a9565b6102dd6106ee565b6040516102a99190611c43565b61029f6102f8366004611c76565b6107c3565b6102c561030b366004611ca4565b6107ce565b61029f61031e366004611c76565b6107e6565b610336610331366004611cd0565b61080d565b005b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025461029f565b6102c561036d366004611cd0565b610a30565b61029f610380366004611c76565b6000908152600160208190526040909120015490565b6103366103a4366004611d11565b610a54565b604051601281526020016102a9565b6103366103c6366004611d11565b610a80565b6035546001600160a01b03165b6040516001600160a01b0390911681526020016102a9565b610336610ad1565b61029f620186a081565b61029f610410366004611c76565b610ae7565b610336610423366004611d41565b6035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60005460ff166102c5565b61029f61046b366004611d11565b610b14565b61029f61047e366004611d41565b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00602052604090205490565b610336610b35565b6103d86104ce366004611d5e565b610b48565b6102c56104e1366004611d11565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61029f61051a366004611d11565b610b60565b6102dd610b81565b61029f600081565b6102c561053d366004611ca4565b610bd2565b61029f610550366004611d80565b610be0565b61029f610563366004611d80565b610c6f565b61029f610576366004611c76565b610cf1565b61029f610589366004611c76565b610cfc565b61029f61059c366004611d41565b610d13565b6103366105af366004611d11565b610d54565b61029f6105c2366004611d41565b610d7a565b61029f6105d5366004611dc2565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6035546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190611df0565b905090565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106e857506106e882610db7565b92915050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161073f90611e09565b80601f016020809104026020016040519081016040528092919081815260200182805461076b90611e09565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b505050505091505090565b60006106e882610e1e565b6000336107dc818585610e7f565b5060019392505050565b6000806107f283610e8c565b90506108066108018285611e59565b610ea0565b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108585750825b905060008267ffffffffffffffff1660011480156108755750303b155b905081158015610883575080155b156108ba576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156108ee57845468ff00000000000000001916680100000000000000001785555b6001600160a01b03871661092e576040517f3334921400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109a26040518060400160405280600c81526020017f466c6f707079205661756c7400000000000000000000000000000000000000008152506040518060400160405280600381526020017f4656540000000000000000000000000000000000000000000000000000000000815250610eed565b6109ad600089610f03565b506035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905560368690558315610a2657845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600033610a3e858285610f30565b610a49858585610fe0565b506001949350505050565b60008281526001602081905260409091200154610a708161103f565b610a7a8383610f03565b50505050565b6001600160a01b0381163314610ac2576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610acc8282611049565b505050565b6000610adc8161103f565b610ae4611076565b50565b600080610af383610e1e565b90506000610b0082610e8c565b9050610b0c8183611e59565b949350505050565b6000610b1e6110c8565b610b2783610cf1565b90506106e833838584611107565b6000610b408161103f565b610ae4611185565b600082815260026020526040812061080690836111c2565b6000610b6a6110c8565b610b73836107c3565b90506106e833838386611107565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161073f90611e09565b6000336107dc818585610fe0565b6000610bea6110c8565b6000610bf583610d13565b905080851115610c4f576040517fd929e4430000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260248101869052604481018290526064015b60405180910390fd5b610c58856107e6565b9150610c6733848688866111ce565b509392505050565b6000610c796110c8565b6000610c8483610d7a565b905080851115610cd9576040517fb8b8b59c0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810186905260448101829052606401610c46565b610ce285610ae7565b9150610c6733848685896111ce565b60006106e882610ea0565b60008181526002602052604081206106e89061127a565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546106e890610e1e565b60008281526001602081905260409091200154610d708161103f565b610a7a8383611049565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546106e8565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106e857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106e8565b6000610e2c6003600a611f50565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610e589190611f5f565b610e6061061f565b610e6b906001611f5f565b610e759084611f72565b6106e89190611f89565b610acc8383836001611284565b6000620186a060365483610e759190611f72565b6000610eaa61061f565b610eb5906001611f5f565b610ec16003600a611f50565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610e6b9190611f5f565b610ef56113b0565b610eff8282611417565b5050565b600080610f10848461147a565b90508015610806576000848152600260205260409020610c67908461150d565b6001600160a01b0383811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160209081526040808320938616835292905220546000198114610a7a5781811015610fd1576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610c46565b610a7a84848484036000611284565b6001600160a01b03831661100a57604051634b637e8f60e11b815260006004820152602401610c46565b6001600160a01b0382166110345760405163ec442f0560e01b815260006004820152602401610c46565b610acc838383611522565b610ae4813361167d565b60008061105684846116eb565b90508015610806576000848152600260205260409020610c679084611772565b61107e611787565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff1615611105576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60355461111f906001600160a01b03168530856117c3565b611129838261183f565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611177929190918252602082015260400190565b60405180910390a350505050565b61118d6110c8565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110ab3390565b60006108068383611875565b826001600160a01b0316856001600160a01b0316146111f2576111f2848683610f30565b6111fc848261189f565b603554611213906001600160a01b031684846118d5565b836001600160a01b0316836001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161126b929190918252602082015260400190565b60405180910390a45050505050565b60006106e8825490565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b0385166112e8576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610c46565b6001600160a01b03841661132b576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610c46565b6001600160a01b038086166000908152600183016020908152604080832093881683529290522083905581156113a957836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516113a091815260200190565b60405180910390a35b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611105576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61141f6113b0565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0361146b8482612011565b5060048101610a7a8382612011565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166115055760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016106e8565b5060006106e8565b6000610806836001600160a01b038416611906565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b03841661157057818160020160008282546115659190611f5f565b909155506115fb9050565b6001600160a01b038416600090815260208290526040902054828110156115dc576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03861660048201526024810182905260448101849052606401610c46565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611619576002810180548390039055611638565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161117791815260200190565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610eff576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610c46565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16156115055760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016106e8565b6000610806836001600160a01b03841661194d565b60005460ff16611105576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610a7a9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a40565b6001600160a01b0382166118695760405163ec442f0560e01b815260006004820152602401610c46565b610eff60008383611522565b600082600001828154811061188c5761188c6120d1565b9060005260206000200154905092915050565b6001600160a01b0382166118c957604051634b637e8f60e11b815260006004820152602401610c46565b610eff82600083611522565b6040516001600160a01b03838116602483015260448201839052610acc91859182169063a9059cbb906064016117f8565b6000818152600183016020526040812054611505575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106e8565b60008181526001830160205260408120548015611a36576000611971600183611e59565b855490915060009061198590600190611e59565b90508082146119ea5760008660000182815481106119a5576119a56120d1565b90600052602060002001549050808760000184815481106119c8576119c86120d1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119fb576119fb6120e7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106e8565b60009150506106e8565b6000611a556001600160a01b03841683611abc565b90508051600014158015611a7a575080806020019051810190611a7891906120fd565b155b15610acc576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c46565b60606108068383600084600080856001600160a01b03168486604051611ae2919061211f565b60006040518083038185875af1925050503d8060008114611b1f576040519150601f19603f3d011682016040523d82523d6000602084013e611b24565b606091505b5091509150611b34868383611b3e565b9695505050505050565b606082611b5357611b4e82611bb3565b610806565b8151158015611b6a57506001600160a01b0384163b155b15611bac576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c46565b5080610806565b805115611bc35780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611c0757600080fd5b81356001600160e01b03198116811461080657600080fd5b60005b83811015611c3a578181015183820152602001611c22565b50506000910152565b6020815260008251806020840152611c62816040850160208701611c1f565b601f01601f19169190910160400192915050565b600060208284031215611c8857600080fd5b5035919050565b6001600160a01b0381168114610ae457600080fd5b60008060408385031215611cb757600080fd5b8235611cc281611c8f565b946020939093013593505050565b600080600060608486031215611ce557600080fd5b8335611cf081611c8f565b92506020840135611d0081611c8f565b929592945050506040919091013590565b60008060408385031215611d2457600080fd5b823591506020830135611d3681611c8f565b809150509250929050565b600060208284031215611d5357600080fd5b813561080681611c8f565b60008060408385031215611d7157600080fd5b50508035926020909101359150565b600080600060608486031215611d9557600080fd5b833592506020840135611da781611c8f565b91506040840135611db781611c8f565b809150509250925092565b60008060408385031215611dd557600080fd5b8235611de081611c8f565b91506020830135611d3681611c8f565b600060208284031215611e0257600080fd5b5051919050565b600181811c90821680611e1d57607f821691505b602082108103611e3d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106e8576106e8611e43565b600181815b80851115611ea7578160001904821115611e8d57611e8d611e43565b80851615611e9a57918102915b93841c9390800290611e71565b509250929050565b600082611ebe575060016106e8565b81611ecb575060006106e8565b8160018114611ee15760028114611eeb57611f07565b60019150506106e8565b60ff841115611efc57611efc611e43565b50506001821b6106e8565b5060208310610133831016604e8410600b8410161715611f2a575081810a6106e8565b611f348383611e6c565b8060001904821115611f4857611f48611e43565b029392505050565b600061080660ff841683611eaf565b808201808211156106e8576106e8611e43565b80820281158282048414176106e8576106e8611e43565b600082611fa657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b601f821115610acc576000816000526020600020601f850160051c81016020861015611fea5750805b601f850160051c820191505b8181101561200957828155600101611ff6565b505050505050565b815167ffffffffffffffff81111561202b5761202b611fab565b61203f816120398454611e09565b84611fc1565b602080601f831160018114612074576000841561205c5750858301515b600019600386901b1c1916600185901b178555612009565b600085815260208120601f198616915b828110156120a357888601518255948401946001909101908401612084565b50858210156120c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561210f57600080fd5b8151801515811461080657600080fd5b60008251612131818460208701611c1f565b919091019291505056fea264697066735822122040c1379f808c7c8ba88001ca05e75b726fa877383df9a771a93979350a0974c064736f6c63430008190033\"",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "FloppyVault",
  "deployedBytecode": "\"0x608060405234801561001057600080fd5b50600436106102925760003560e01c80636e553f6511610160578063b3d7f6b9116100d8578063ce96cb771161008c578063d905777e11610071578063d905777e146105b4578063dd62ed3e146105c7578063ef8b30f71461056857600080fd5b8063ce96cb771461058e578063d547741f146105a157600080fd5b8063ba087652116100bd578063ba08765214610555578063c6e6f59214610568578063ca15c8731461057b57600080fd5b8063b3d7f6b9146102ea578063b460af941461054257600080fd5b806391d148541161012f57806395d89b411161011457806395d89b411461051f578063a217fddf14610527578063a9059cbb1461052f57600080fd5b806391d14854146104d357806394bf804d1461050c57600080fd5b80636e553f651461045d57806370a08231146104705780638456cb59146104b85780639010d07c146104c057600080fd5b8063248a9ca31161020e5780633f4ba83a116101c25780634cdad506116101a75780634cdad506146104025780634d7e4c61146104155780635c975abb1461045257600080fd5b80633f4ba83a146103f05780634c255c97146103f857600080fd5b8063313ce567116101f3578063313ce567146103a957806336568abe146103b857806338d52e0f146103cb57600080fd5b8063248a9ca3146103725780632f2ff15d1461039657600080fd5b8063095ea7b3116102655780631794bb3c1161024a5780631794bb3c1461032357806318160ddd1461033857806323b872dd1461035f57600080fd5b8063095ea7b3146102fd5780630a28a4771461031057600080fd5b806301e1d1141461029757806301ffc9a7146102b257806306fdde03146102d557806307a2d13a146102ea575b600080fd5b61029f61061f565b6040519081526020015b60405180910390f35b6102c56102c0366004611bf5565b6106aa565b60405190151581526020016102a9565b6102dd6106ee565b6040516102a99190611c43565b61029f6102f8366004611c76565b6107c3565b6102c561030b366004611ca4565b6107ce565b61029f61031e366004611c76565b6107e6565b610336610331366004611cd0565b61080d565b005b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025461029f565b6102c561036d366004611cd0565b610a30565b61029f610380366004611c76565b6000908152600160208190526040909120015490565b6103366103a4366004611d11565b610a54565b604051601281526020016102a9565b6103366103c6366004611d11565b610a80565b6035546001600160a01b03165b6040516001600160a01b0390911681526020016102a9565b610336610ad1565b61029f620186a081565b61029f610410366004611c76565b610ae7565b610336610423366004611d41565b6035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60005460ff166102c5565b61029f61046b366004611d11565b610b14565b61029f61047e366004611d41565b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00602052604090205490565b610336610b35565b6103d86104ce366004611d5e565b610b48565b6102c56104e1366004611d11565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61029f61051a366004611d11565b610b60565b6102dd610b81565b61029f600081565b6102c561053d366004611ca4565b610bd2565b61029f610550366004611d80565b610be0565b61029f610563366004611d80565b610c6f565b61029f610576366004611c76565b610cf1565b61029f610589366004611c76565b610cfc565b61029f61059c366004611d41565b610d13565b6103366105af366004611d11565b610d54565b61029f6105c2366004611d41565b610d7a565b61029f6105d5366004611dc2565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6035546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190611df0565b905090565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106e857506106e882610db7565b92915050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161073f90611e09565b80601f016020809104026020016040519081016040528092919081815260200182805461076b90611e09565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b505050505091505090565b60006106e882610e1e565b6000336107dc818585610e7f565b5060019392505050565b6000806107f283610e8c565b90506108066108018285611e59565b610ea0565b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108585750825b905060008267ffffffffffffffff1660011480156108755750303b155b905081158015610883575080155b156108ba576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156108ee57845468ff00000000000000001916680100000000000000001785555b6001600160a01b03871661092e576040517f3334921400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109a26040518060400160405280600c81526020017f466c6f707079205661756c7400000000000000000000000000000000000000008152506040518060400160405280600381526020017f4656540000000000000000000000000000000000000000000000000000000000815250610eed565b6109ad600089610f03565b506035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905560368690558315610a2657845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600033610a3e858285610f30565b610a49858585610fe0565b506001949350505050565b60008281526001602081905260409091200154610a708161103f565b610a7a8383610f03565b50505050565b6001600160a01b0381163314610ac2576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610acc8282611049565b505050565b6000610adc8161103f565b610ae4611076565b50565b600080610af383610e1e565b90506000610b0082610e8c565b9050610b0c8183611e59565b949350505050565b6000610b1e6110c8565b610b2783610cf1565b90506106e833838584611107565b6000610b408161103f565b610ae4611185565b600082815260026020526040812061080690836111c2565b6000610b6a6110c8565b610b73836107c3565b90506106e833838386611107565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060917f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace009161073f90611e09565b6000336107dc818585610fe0565b6000610bea6110c8565b6000610bf583610d13565b905080851115610c4f576040517fd929e4430000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260248101869052604481018290526064015b60405180910390fd5b610c58856107e6565b9150610c6733848688866111ce565b509392505050565b6000610c796110c8565b6000610c8483610d7a565b905080851115610cd9576040517fb8b8b59c0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810186905260448101829052606401610c46565b610ce285610ae7565b9150610c6733848685896111ce565b60006106e882610ea0565b60008181526002602052604081206106e89061127a565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546106e890610e1e565b60008281526001602081905260409091200154610d708161103f565b610a7a8383611049565b6001600160a01b03811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260408120546106e8565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106e857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106e8565b6000610e2c6003600a611f50565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610e589190611f5f565b610e6061061f565b610e6b906001611f5f565b610e759084611f72565b6106e89190611f89565b610acc8383836001611284565b6000620186a060365483610e759190611f72565b6000610eaa61061f565b610eb5906001611f5f565b610ec16003600a611f50565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610e6b9190611f5f565b610ef56113b0565b610eff8282611417565b5050565b600080610f10848461147a565b90508015610806576000848152600260205260409020610c67908461150d565b6001600160a01b0383811660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160209081526040808320938616835292905220546000198114610a7a5781811015610fd1576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610c46565b610a7a84848484036000611284565b6001600160a01b03831661100a57604051634b637e8f60e11b815260006004820152602401610c46565b6001600160a01b0382166110345760405163ec442f0560e01b815260006004820152602401610c46565b610acc838383611522565b610ae4813361167d565b60008061105684846116eb565b90508015610806576000848152600260205260409020610c679084611772565b61107e611787565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff1615611105576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60355461111f906001600160a01b03168530856117c3565b611129838261183f565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611177929190918252602082015260400190565b60405180910390a350505050565b61118d6110c8565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110ab3390565b60006108068383611875565b826001600160a01b0316856001600160a01b0316146111f2576111f2848683610f30565b6111fc848261189f565b603554611213906001600160a01b031684846118d5565b836001600160a01b0316836001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161126b929190918252602082015260400190565b60405180910390a45050505050565b60006106e8825490565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b0385166112e8576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610c46565b6001600160a01b03841661132b576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610c46565b6001600160a01b038086166000908152600183016020908152604080832093881683529290522083905581156113a957836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516113a091815260200190565b60405180910390a35b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611105576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61141f6113b0565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0361146b8482612011565b5060048101610a7a8382612011565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff166115055760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016106e8565b5060006106e8565b6000610806836001600160a01b038416611906565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006001600160a01b03841661157057818160020160008282546115659190611f5f565b909155506115fb9050565b6001600160a01b038416600090815260208290526040902054828110156115dc576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03861660048201526024810182905260448101849052606401610c46565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611619576002810180548390039055611638565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161117791815260200190565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610eff576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610c46565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16156115055760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016106e8565b6000610806836001600160a01b03841661194d565b60005460ff16611105576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610a7a9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a40565b6001600160a01b0382166118695760405163ec442f0560e01b815260006004820152602401610c46565b610eff60008383611522565b600082600001828154811061188c5761188c6120d1565b9060005260206000200154905092915050565b6001600160a01b0382166118c957604051634b637e8f60e11b815260006004820152602401610c46565b610eff82600083611522565b6040516001600160a01b03838116602483015260448201839052610acc91859182169063a9059cbb906064016117f8565b6000818152600183016020526040812054611505575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106e8565b60008181526001830160205260408120548015611a36576000611971600183611e59565b855490915060009061198590600190611e59565b90508082146119ea5760008660000182815481106119a5576119a56120d1565b90600052602060002001549050808760000184815481106119c8576119c86120d1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119fb576119fb6120e7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106e8565b60009150506106e8565b6000611a556001600160a01b03841683611abc565b90508051600014158015611a7a575080806020019051810190611a7891906120fd565b155b15610acc576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c46565b60606108068383600084600080856001600160a01b03168486604051611ae2919061211f565b60006040518083038185875af1925050503d8060008114611b1f576040519150601f19603f3d011682016040523d82523d6000602084013e611b24565b606091505b5091509150611b34868383611b3e565b9695505050505050565b606082611b5357611b4e82611bb3565b610806565b8151158015611b6a57506001600160a01b0384163b155b15611bac576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c46565b5080610806565b805115611bc35780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611c0757600080fd5b81356001600160e01b03198116811461080657600080fd5b60005b83811015611c3a578181015183820152602001611c22565b50506000910152565b6020815260008251806020840152611c62816040850160208701611c1f565b601f01601f19169190910160400192915050565b600060208284031215611c8857600080fd5b5035919050565b6001600160a01b0381168114610ae457600080fd5b60008060408385031215611cb757600080fd5b8235611cc281611c8f565b946020939093013593505050565b600080600060608486031215611ce557600080fd5b8335611cf081611c8f565b92506020840135611d0081611c8f565b929592945050506040919091013590565b60008060408385031215611d2457600080fd5b823591506020830135611d3681611c8f565b809150509250929050565b600060208284031215611d5357600080fd5b813561080681611c8f565b60008060408385031215611d7157600080fd5b50508035926020909101359150565b600080600060608486031215611d9557600080fd5b833592506020840135611da781611c8f565b91506040840135611db781611c8f565b809150509250925092565b60008060408385031215611dd557600080fd5b8235611de081611c8f565b91506020830135611d3681611c8f565b600060208284031215611e0257600080fd5b5051919050565b600181811c90821680611e1d57607f821691505b602082108103611e3d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106e8576106e8611e43565b600181815b80851115611ea7578160001904821115611e8d57611e8d611e43565b80851615611e9a57918102915b93841c9390800290611e71565b509250929050565b600082611ebe575060016106e8565b81611ecb575060006106e8565b8160018114611ee15760028114611eeb57611f07565b60019150506106e8565b60ff841115611efc57611efc611e43565b50506001821b6106e8565b5060208310610133831016604e8410600b8410161715611f2a575081810a6106e8565b611f348383611e6c565b8060001904821115611f4857611f48611e43565b029392505050565b600061080660ff841683611eaf565b808201808211156106e8576106e8611e43565b80820281158282048414176106e8576106e8611e43565b600082611fa657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b601f821115610acc576000816000526020600020601f850160051c81016020861015611fea5750805b601f850160051c820191505b8181101561200957828155600101611ff6565b505050505050565b815167ffffffffffffffff81111561202b5761202b611fab565b61203f816120398454611e09565b84611fc1565b602080601f831160018114612074576000841561205c5750858301515b600019600386901b1c1916600185901b178555612009565b600085815260208120601f198616915b828110156120a357888601518255948401946001909101908401612084565b50858210156120c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561210f57600080fd5b8151801515811461080657600080fd5b60008251612131818460208701611c1f565b919091019291505056fea264697066735822122040c1379f808c7c8ba88001ca05e75b726fa877383df9a771a93979350a0974c064736f6c63430008190033\"",
  "deployer": "0x000000000000000000000000000000000000dEaD",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "Return token address managed by this vault."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "Return the ideal amount of tokens the Vault would exchange for the amount of shares."
      },
      "convertToShares(uint256)": {
        "details": "Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256,address)": {
        "details": "Mint shares to the receiver based on the amount of tokens deposited to this Vault. Emit an {Deposit} event."
      },
      "exposed_setToken(address)": {
        "details": "This function is used for testing purposes, please delete before deploy to production."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxRedeem(address)": {
        "details": "Return maximum shares user can burn."
      },
      "maxWithdraw(address)": {
        "details": "Return maximum amount of tokens user can withdraw."
      },
      "mint(uint256,address)": {
        "details": "Mint exactly amount of shares to the receiver by deposited to this Vault. Emit an {Deposit} event."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Pauses the Vault functionality. Requirements: - The caller must have the admin role."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "previewDeposit(uint256)": {
        "details": "Return the actual shares would be recieved when deposit amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc."
      },
      "previewMint(uint256)": {
        "details": "Return the token amount would need to deposit in order to mint exactly amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc."
      },
      "previewRedeem(uint256)": {
        "details": "Return the actual token amount would get when burn amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc."
      },
      "previewWithdraw(uint256)": {
        "details": "Return the amount of shares need to burn in order to withdraw exactly an amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc."
      },
      "redeem(uint256,address,address)": {
        "details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. Emit an {Withdraw} event."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "Return total token amout of this vault."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "unpause()": {
        "details": "Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role."
      },
      "withdraw(uint256,address,address)": {
        "details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. Emit an {Withdraw} event."
      }
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Deposit(address,address,uint256,uint256)": {
        "details": "emit when user deposit ERC20 token."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Withdraw(address,address,address,uint256,uint256)": {
        "details": "emit when user withdraw ERC20 token."
      }
    },
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidAssetAddress()": [
        {
          "details": "Revert when asset is address(0);"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "\"{\\\"compiler\\\":{\\\"version\\\":\\\"0.8.25+commit.b61c2a91\\\"},\\\"language\\\":\\\"Solidity\\\",\\\"output\\\":{\\\"abi\\\":[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"AccessControlBadConfirmation\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"neededRole\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"AccessControlUnauthorizedAccount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"target\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressEmptyCode\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddressInsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allowance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientAllowance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"balance\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"needed\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ERC20InsufficientBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidApprover\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidReceiver\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"ERC20InvalidSpender\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"EnforcedPause\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"max\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ExceededMaxRedeem\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assets\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"max\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ExceededMaxWithdraw\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ExpectedPause\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"FailedInnerCall\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidAssetAddress\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidInitialization\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotInitializing\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SafeERC20FailedOperation\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Deposit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Paused\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"previousAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"newAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"RoleAdminChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleGranted\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleRevoked\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Unpaused\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Withdraw\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DEFAULT_ADMIN_ROLE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_PERCENTAGE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"allowance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"asset\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"assetTokenAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"convertToAssets\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"assetAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"convertToShares\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"deposit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"newAsset\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"exposed_setToken\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleAdmin\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getRoleMember\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleMemberCount\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"grantRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"hasRole\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"admin\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"taxPercent\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"maxRedeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"maxWithdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"mint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"pause\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"paused\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewDeposit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewMint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewRedeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"previewWithdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"redeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"callerConfirmation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"renounceRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"revokeRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalAssets\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"totalManagedAssets\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transfer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferFrom\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"unpause\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenAmount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"shares\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}],\\\"devdoc\\\":{\\\"errors\\\":{\\\"AccessControlBadConfirmation()\\\":[{\\\"details\\\":\\\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\\"}],\\\"AccessControlUnauthorizedAccount(address,bytes32)\\\":[{\\\"details\\\":\\\"The `account` is missing a role.\\\"}],\\\"AddressEmptyCode(address)\\\":[{\\\"details\\\":\\\"There's no code at `target` (it is not a contract).\\\"}],\\\"AddressInsufficientBalance(address)\\\":[{\\\"details\\\":\\\"The ETH balance of the account is not enough to perform the operation.\\\"}],\\\"ERC20InsufficientAllowance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\",\\\"params\\\":{\\\"allowance\\\":\\\"Amount of tokens a `spender` is allowed to operate with.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"ERC20InsufficientBalance(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"balance\\\":\\\"Current balance for the interacting account.\\\",\\\"needed\\\":\\\"Minimum amount required to perform a transfer.\\\",\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidApprover(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"approver\\\":\\\"Address initiating an approval operation.\\\"}}],\\\"ERC20InvalidReceiver(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `receiver`. Used in transfers.\\\",\\\"params\\\":{\\\"receiver\\\":\\\"Address to which tokens are being transferred.\\\"}}],\\\"ERC20InvalidSender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the token `sender`. Used in transfers.\\\",\\\"params\\\":{\\\"sender\\\":\\\"Address whose tokens are being transferred.\\\"}}],\\\"ERC20InvalidSpender(address)\\\":[{\\\"details\\\":\\\"Indicates a failure with the `spender` to be approved. Used in approvals.\\\",\\\"params\\\":{\\\"spender\\\":\\\"Address that may be allowed to operate on tokens without being their owner.\\\"}}],\\\"EnforcedPause()\\\":[{\\\"details\\\":\\\"The operation failed because the contract is paused.\\\"}],\\\"ExceededMaxRedeem(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Attempted to redeem more shares than the max amount for `receiver`.\\\"}],\\\"ExceededMaxWithdraw(address,uint256,uint256)\\\":[{\\\"details\\\":\\\"Attempted to withdraw more assets than the max amount for `receiver`.\\\"}],\\\"ExpectedPause()\\\":[{\\\"details\\\":\\\"The operation failed because the contract is not paused.\\\"}],\\\"FailedInnerCall()\\\":[{\\\"details\\\":\\\"A call to an address target failed. The target may have reverted.\\\"}],\\\"InvalidAssetAddress()\\\":[{\\\"details\\\":\\\"Revert when asset is address(0);\\\"}],\\\"InvalidInitialization()\\\":[{\\\"details\\\":\\\"The contract is already initialized.\\\"}],\\\"NotInitializing()\\\":[{\\\"details\\\":\\\"The contract is not initializing.\\\"}],\\\"SafeERC20FailedOperation(address)\\\":[{\\\"details\\\":\\\"An operation with an ERC20 token failed.\\\"}]},\\\"events\\\":{\\\"Approval(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\\\"},\\\"Deposit(address,address,uint256,uint256)\\\":{\\\"details\\\":\\\"emit when user deposit ERC20 token.\\\"},\\\"Initialized(uint64)\\\":{\\\"details\\\":\\\"Triggered when the contract has been initialized or reinitialized.\\\"},\\\"Paused(address)\\\":{\\\"details\\\":\\\"Emitted when the pause is triggered by `account`.\\\"},\\\"RoleAdminChanged(bytes32,bytes32,bytes32)\\\":{\\\"details\\\":\\\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\\\"},\\\"RoleGranted(bytes32,address,address)\\\":{\\\"details\\\":\\\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\\\"},\\\"RoleRevoked(bytes32,address,address)\\\":{\\\"details\\\":\\\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\"},\\\"Transfer(address,address,uint256)\\\":{\\\"details\\\":\\\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\\\"},\\\"Unpaused(address)\\\":{\\\"details\\\":\\\"Emitted when the pause is lifted by `account`.\\\"},\\\"Withdraw(address,address,address,uint256,uint256)\\\":{\\\"details\\\":\\\"emit when user withdraw ERC20 token.\\\"}},\\\"kind\\\":\\\"dev\\\",\\\"methods\\\":{\\\"allowance(address,address)\\\":{\\\"details\\\":\\\"See {IERC20-allowance}.\\\"},\\\"approve(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\\\"},\\\"asset()\\\":{\\\"details\\\":\\\"Return token address managed by this vault.\\\"},\\\"balanceOf(address)\\\":{\\\"details\\\":\\\"See {IERC20-balanceOf}.\\\"},\\\"convertToAssets(uint256)\\\":{\\\"details\\\":\\\"Return the ideal amount of tokens the Vault would exchange for the amount of shares.\\\"},\\\"convertToShares(uint256)\\\":{\\\"details\\\":\\\"Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved.\\\"},\\\"decimals()\\\":{\\\"details\\\":\\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\\"},\\\"deposit(uint256,address)\\\":{\\\"details\\\":\\\"Mint shares to the receiver based on the amount of tokens deposited to this Vault. Emit an {Deposit} event.\\\"},\\\"exposed_setToken(address)\\\":{\\\"details\\\":\\\"This function is used for testing purposes, please delete before deploy to production.\\\"},\\\"getRoleAdmin(bytes32)\\\":{\\\"details\\\":\\\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\\\"},\\\"getRoleMember(bytes32,uint256)\\\":{\\\"details\\\":\\\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\\\"},\\\"getRoleMemberCount(bytes32)\\\":{\\\"details\\\":\\\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\\\"},\\\"grantRole(bytes32,address)\\\":{\\\"details\\\":\\\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\\\"},\\\"hasRole(bytes32,address)\\\":{\\\"details\\\":\\\"Returns `true` if `account` has been granted `role`.\\\"},\\\"maxRedeem(address)\\\":{\\\"details\\\":\\\"Return maximum shares user can burn.\\\"},\\\"maxWithdraw(address)\\\":{\\\"details\\\":\\\"Return maximum amount of tokens user can withdraw.\\\"},\\\"mint(uint256,address)\\\":{\\\"details\\\":\\\"Mint exactly amount of shares to the receiver by deposited to this Vault. Emit an {Deposit} event.\\\"},\\\"name()\\\":{\\\"details\\\":\\\"Returns the name of the token.\\\"},\\\"pause()\\\":{\\\"details\\\":\\\"Pauses the Vault functionality. Requirements: - The caller must have the admin role.\\\"},\\\"paused()\\\":{\\\"details\\\":\\\"Returns true if the contract is paused, and false otherwise.\\\"},\\\"previewDeposit(uint256)\\\":{\\\"details\\\":\\\"Return the actual shares would be recieved when deposit amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc.\\\"},\\\"previewMint(uint256)\\\":{\\\"details\\\":\\\"Return the token amount would need to deposit in order to mint exactly amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc.\\\"},\\\"previewRedeem(uint256)\\\":{\\\"details\\\":\\\"Return the actual token amount would get when burn amount of shares. NOTE: this function may not equal to convertToAssets because of tax, etc.\\\"},\\\"previewWithdraw(uint256)\\\":{\\\"details\\\":\\\"Return the amount of shares need to burn in order to withdraw exactly an amount of tokens. NOTE: this function may not equal to convertToShares because of tax, etc.\\\"},\\\"redeem(uint256,address,address)\\\":{\\\"details\\\":\\\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. Emit an {Withdraw} event.\\\"},\\\"renounceRole(bytes32,address)\\\":{\\\"details\\\":\\\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\\\"},\\\"revokeRole(bytes32,address)\\\":{\\\"details\\\":\\\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\\\"},\\\"supportsInterface(bytes4)\\\":{\\\"details\\\":\\\"See {IERC165-supportsInterface}.\\\"},\\\"symbol()\\\":{\\\"details\\\":\\\"Returns the symbol of the token, usually a shorter version of the name.\\\"},\\\"totalAssets()\\\":{\\\"details\\\":\\\"Return total token amout of this vault.\\\"},\\\"totalSupply()\\\":{\\\"details\\\":\\\"See {IERC20-totalSupply}.\\\"},\\\"transfer(address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\\\"},\\\"transferFrom(address,address,uint256)\\\":{\\\"details\\\":\\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\\\"},\\\"unpause()\\\":{\\\"details\\\":\\\"Unpauses the registrar controller's functionality. Requirements: - The caller must have the admin role.\\\"},\\\"withdraw(uint256,address,address)\\\":{\\\"details\\\":\\\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. Emit an {Withdraw} event.\\\"}},\\\"stateVariables\\\":{\\\"_____gap\\\":{\\\"details\\\":\\\"Gap for upgradability.\\\"},\\\"_asset\\\":{\\\"details\\\":\\\"Address of the token asset.\\\"},\\\"_taxPercent\\\":{\\\"details\\\":\\\"Tax percentage Vault would take per deposit or mint request. [0_000 -> 100_000] 0% -> 100%;\\\"}},\\\"version\\\":1},\\\"userdoc\\\":{\\\"kind\\\":\\\"user\\\",\\\"methods\\\":{},\\\"version\\\":1}},\\\"settings\\\":{\\\"compilationTarget\\\":{\\\"src/FloppyVault.sol\\\":\\\"FloppyVault\\\"},\\\"evmVersion\\\":\\\"istanbul\\\",\\\"libraries\\\":{},\\\"metadata\\\":{\\\"bytecodeHash\\\":\\\"ipfs\\\",\\\"useLiteralContent\\\":true},\\\"optimizer\\\":{\\\"enabled\\\":true,\\\"runs\\\":1000},\\\"remappings\\\":[\\\":@contracts/=src/\\\",\\\":@fdk-0.3.0-beta/=dependencies/@fdk-0.3.0-beta/\\\",\\\":@fdk/=dependencies/@fdk-0.3.0-beta/script/\\\",\\\":@interfaces/=src/interfaces/\\\",\\\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\\\",\\\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\\\",\\\":@prb-test-0.6.4/=dependencies/@prb-test-0.6.4/\\\",\\\":@script/=script/\\\",\\\":@solady/=dependencies/@fdk-0.3.0-beta/dependencies/solady-0.0.206/src/\\\",\\\":@uniswap-core/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-periphery/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":@uniswap-v2-core-1.0.1/=dependencies/@uniswap-v2-core-1.0.1/\\\",\\\":@uniswap-v2-periphery-1.1.0-beta.0/=dependencies/@uniswap-v2-periphery-1.1.0-beta.0/\\\",\\\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\\\",\\\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\\\",\\\":forge-std/=lib/forge-std/src/\\\",\\\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\\\",\\\":openzeppelin-contracts/=lib/openzeppelin-contracts/\\\"]},\\\"sources\\\":{\\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\\\n *\\\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\\\n * reused. This mechanism prevents re-execution of each \\\\\\\"step\\\\\\\" but allows the creation of new initialization steps in\\\\n * case an upgrade adds a module that needs to be initialized.\\\\n *\\\\n * For example:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```solidity\\\\n * contract MyToken is ERC20Upgradeable {\\\\n *     function initialize() initializer public {\\\\n *         __ERC20_init(\\\\\\\"MyToken\\\\\\\", \\\\\\\"MTK\\\\\\\");\\\\n *     }\\\\n * }\\\\n *\\\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\\\n *     function initializeV2() reinitializer(2) public {\\\\n *         __ERC20Permit_init(\\\\\\\"MyToken\\\\\\\");\\\\n *     }\\\\n * }\\\\n * ```\\\\n *\\\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\\\n *\\\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\\\n *\\\\n * [CAUTION]\\\\n * ====\\\\n * Avoid leaving a contract uninitialized.\\\\n *\\\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\\\n *\\\\n * [.hljs-theme-light.nopadding]\\\\n * ```\\\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\\\n * constructor() {\\\\n *     _disableInitializers();\\\\n * }\\\\n * ```\\\\n * ====\\\\n */\\\\nabstract contract Initializable {\\\\n    /**\\\\n     * @dev Storage of the initializable contract.\\\\n     *\\\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\\\n     * when using with upgradeable contracts.\\\\n     *\\\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\\\n     */\\\\n    struct InitializableStorage {\\\\n        /**\\\\n         * @dev Indicates that the contract has been initialized.\\\\n         */\\\\n        uint64 _initialized;\\\\n        /**\\\\n         * @dev Indicates that the contract is in the process of being initialized.\\\\n         */\\\\n        bool _initializing;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.Initializable\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\\\n\\\\n    /**\\\\n     * @dev The contract is already initialized.\\\\n     */\\\\n    error InvalidInitialization();\\\\n\\\\n    /**\\\\n     * @dev The contract is not initializing.\\\\n     */\\\\n    error NotInitializing();\\\\n\\\\n    /**\\\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\\\n     */\\\\n    event Initialized(uint64 version);\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\\\n     *\\\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\\\n     * production.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier initializer() {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        // Cache values to avoid duplicated sloads\\\\n        bool isTopLevelCall = !$._initializing;\\\\n        uint64 initialized = $._initialized;\\\\n\\\\n        // Allowed calls:\\\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\\\n        //                 initialized\\\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\\\n        //                 current contract is just being deployed\\\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\\\n\\\\n        if (!initialSetup && !construction) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = 1;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = true;\\\\n        }\\\\n        _;\\\\n        if (isTopLevelCall) {\\\\n            $._initializing = false;\\\\n            emit Initialized(1);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\\\n     * used to initialize parent contracts.\\\\n     *\\\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\\\n     * are added through upgrades and that require initialization.\\\\n     *\\\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\\\n     *\\\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\\\n     * a contract, executing them in the right order is up to the developer or operator.\\\\n     *\\\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\\\n     *\\\\n     * Emits an {Initialized} event.\\\\n     */\\\\n    modifier reinitializer(uint64 version) {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing || $._initialized >= version) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        $._initialized = version;\\\\n        $._initializing = true;\\\\n        _;\\\\n        $._initializing = false;\\\\n        emit Initialized(version);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\\\n     */\\\\n    modifier onlyInitializing() {\\\\n        _checkInitializing();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\\\n     */\\\\n    function _checkInitializing() internal view virtual {\\\\n        if (!_isInitializing()) {\\\\n            revert NotInitializing();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\\\n     * through proxies.\\\\n     *\\\\n     * Emits an {Initialized} event the first time it is successfully executed.\\\\n     */\\\\n    function _disableInitializers() internal virtual {\\\\n        // solhint-disable-next-line var-name-mixedcase\\\\n        InitializableStorage storage $ = _getInitializableStorage();\\\\n\\\\n        if ($._initializing) {\\\\n            revert InvalidInitialization();\\\\n        }\\\\n        if ($._initialized != type(uint64).max) {\\\\n            $._initialized = type(uint64).max;\\\\n            emit Initialized(type(uint64).max);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\\\n     */\\\\n    function _getInitializedVersion() internal view returns (uint64) {\\\\n        return _getInitializableStorage()._initialized;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\\\n     */\\\\n    function _isInitializing() internal view returns (bool) {\\\\n        return _getInitializableStorage()._initializing;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns a pointer to the storage namespace.\\\\n     */\\\\n    // solhint-disable-next-line var-name-mixedcase\\\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\\\n        assembly {\\\\n            $.slot := INITIALIZABLE_STORAGE\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\nimport {IERC20Metadata} from \\\\\\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\\\\\";\\\\nimport {ContextUpgradeable} from \\\\\\\"../../utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport {IERC20Errors} from \\\\\\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\\\\\";\\\\nimport {Initializable} from \\\\\\\"../../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * The default value of {decimals} is 18. To change this, you should override\\\\n * this function so it returns a different value.\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn't required by the specification.\\\\n */\\\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\\\n    struct ERC20Storage {\\\\n        mapping(address account => uint256) _balances;\\\\n\\\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\\\n\\\\n        uint256 _totalSupply;\\\\n\\\\n        string _name;\\\\n        string _symbol;\\\\n    }\\\\n\\\\n    // keccak256(abi.encode(uint256(keccak256(\\\\\\\"openzeppelin.storage.ERC20\\\\\\\")) - 1)) & ~bytes32(uint256(0xff))\\\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\\\n\\\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\\\n        assembly {\\\\n            $.slot := ERC20StorageLocation\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        __ERC20_init_unchained(name_, symbol_);\\\\n    }\\\\n\\\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        $._name = name_;\\\\n        $._symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual returns (string memory) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the default value returned by this function, unless\\\\n     * it's overridden.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `value`.\\\\n     */\\\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _transfer(owner, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        return $._allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\\\n        address owner = _msgSender();\\\\n        _approve(owner, spender, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * NOTE: Does not update the allowance if the current allowance\\\\n     * is the maximum `uint256`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` and `to` cannot be the zero address.\\\\n     * - `from` must have a balance of at least `value`.\\\\n     * - the caller must have allowance for ``from``'s tokens of at least\\\\n     * `value`.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\\\n        address spender = _msgSender();\\\\n        _spendAllowance(from, spender, value);\\\\n        _transfer(from, to, value);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _transfer(address from, address to, uint256 value) internal {\\\\n        if (from == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        if (to == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\\\n     * this function.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _update(address from, address to, uint256 value) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (from == address(0)) {\\\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\\\n            $._totalSupply += value;\\\\n        } else {\\\\n            uint256 fromBalance = $._balances[from];\\\\n            if (fromBalance < value) {\\\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\\\n            }\\\\n            unchecked {\\\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\\\n                $._balances[from] = fromBalance - value;\\\\n            }\\\\n        }\\\\n\\\\n        if (to == address(0)) {\\\\n            unchecked {\\\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\\\n                $._totalSupply -= value;\\\\n            }\\\\n        } else {\\\\n            unchecked {\\\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\\\n                $._balances[to] += value;\\\\n            }\\\\n        }\\\\n\\\\n        emit Transfer(from, to, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\\\n     * Relies on the `_update` mechanism\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\\\n     */\\\\n    function _mint(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidReceiver(address(0));\\\\n        }\\\\n        _update(address(0), account, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\\\n     * Relies on the `_update` mechanism.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\\\n     */\\\\n    function _burn(address account, uint256 value) internal {\\\\n        if (account == address(0)) {\\\\n            revert ERC20InvalidSender(address(0));\\\\n        }\\\\n        _update(account, address(0), value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     *\\\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value) internal {\\\\n        _approve(owner, spender, value, true);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\\\n     *\\\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\\\n     * `Approval` event during `transferFrom` operations.\\\\n     *\\\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\\\n     * true using the following override:\\\\n     * ```\\\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\\\n     *     super._approve(owner, spender, value, true);\\\\n     * }\\\\n     * ```\\\\n     *\\\\n     * Requirements are the same as {_approve}.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\\\n        ERC20Storage storage $ = _getERC20Storage();\\\\n        if (owner == address(0)) {\\\\n            revert ERC20InvalidApprover(address(0));\\\\n        }\\\\n        if (spender == address(0)) {\\\\n            revert ERC20InvalidSpender(address(0));\\\\n        }\\\\n        $._allowances[owner][spender] = value;\\\\n        if (emitEvent) {\\\\n            emit Approval(owner, spender, value);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\\\n     *\\\\n     * Does not update the allowance value in case of infinite allowance.\\\\n     * Revert if not enough allowance is available.\\\\n     *\\\\n     * Does not emit an {Approval} event.\\\\n     */\\\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\\\n        uint256 currentAllowance = allowance(owner, spender);\\\\n        if (currentAllowance != type(uint256).max) {\\\\n            if (currentAllowance < value) {\\\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\\\n            }\\\\n            unchecked {\\\\n                _approve(owner, spender, currentAllowance - value, false);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\nimport {Initializable} from \\\\\\\"../proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract ContextUpgradeable is Initializable {\\\\n    function __Context_init() internal onlyInitializing {\\\\n    }\\\\n\\\\n    function __Context_init_unchained() internal onlyInitializing {\\\\n    }\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControl} from \\\\\\\"./IAccessControl.sol\\\\\\\";\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\nimport {ERC165} from \\\\\\\"../utils/introspection/ERC165.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module that allows children to implement role-based access\\\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\\\n * members except through off-chain means by accessing the contract event logs. Some\\\\n * applications may benefit from on-chain enumerability, for those cases see\\\\n * {AccessControlEnumerable}.\\\\n *\\\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\\\n * in the external API and be unique. The best way to achieve this is by\\\\n * using `public constant` hash digests:\\\\n *\\\\n * ```solidity\\\\n * bytes32 public constant MY_ROLE = keccak256(\\\\\\\"MY_ROLE\\\\\\\");\\\\n * ```\\\\n *\\\\n * Roles can be used to represent a set of permissions. To restrict access to a\\\\n * function call, use {hasRole}:\\\\n *\\\\n * ```solidity\\\\n * function foo() public {\\\\n *     require(hasRole(MY_ROLE, msg.sender));\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\\\n * {revokeRole} functions. Each role has an associated admin role, and only\\\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\\\n *\\\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\\\n * that only accounts with this role will be able to grant or revoke other\\\\n * roles. More complex role relationships can be created by using\\\\n * {_setRoleAdmin}.\\\\n *\\\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\\\n * grant and revoke this role. Extra precautions should be taken to secure\\\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\\\n * to enforce additional security measures for this role.\\\\n */\\\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\\\n    struct RoleData {\\\\n        mapping(address account => bool) hasRole;\\\\n        bytes32 adminRole;\\\\n    }\\\\n\\\\n    mapping(bytes32 role => RoleData) private _roles;\\\\n\\\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\\\n\\\\n    /**\\\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\\\n     */\\\\n    modifier onlyRole(bytes32 role) {\\\\n        _checkRole(role);\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\\\n        return _roles[role].hasRole[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\\\n     */\\\\n    function _checkRole(bytes32 role) internal view virtual {\\\\n        _checkRole(role, _msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\\\n     * is missing `role`.\\\\n     */\\\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\\\n        if (!hasRole(role, account)) {\\\\n            revert AccessControlUnauthorizedAccount(account, role);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role's admin, use {_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\\\n        return _roles[role].adminRole;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     *\\\\n     * May emit a {RoleGranted} event.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\\\n        _grantRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\\\n        _revokeRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `callerConfirmation`.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\\\n        if (callerConfirmation != _msgSender()) {\\\\n            revert AccessControlBadConfirmation();\\\\n        }\\\\n\\\\n        _revokeRole(role, callerConfirmation);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\\\n     *\\\\n     * Emits a {RoleAdminChanged} event.\\\\n     */\\\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\\\n        _roles[role].adminRole = adminRole;\\\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     *\\\\n     * May emit a {RoleGranted} event.\\\\n     */\\\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\\\n        if (!hasRole(role, account)) {\\\\n            _roles[role].hasRole[account] = true;\\\\n            emit RoleGranted(role, account, _msgSender());\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     *\\\\n     * May emit a {RoleRevoked} event.\\\\n     */\\\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\\\n        if (hasRole(role, account)) {\\\\n            _roles[role].hasRole[account] = false;\\\\n            emit RoleRevoked(role, account, _msgSender());\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\\\n */\\\\ninterface IAccessControl {\\\\n    /**\\\\n     * @dev The `account` is missing a role.\\\\n     */\\\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\\\n\\\\n    /**\\\\n     * @dev The caller of a function is not the expected one.\\\\n     *\\\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\\\n     */\\\\n    error AccessControlBadConfirmation();\\\\n\\\\n    /**\\\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\\\n     *\\\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\\\n     * {RoleAdminChanged} not being emitted signaling this.\\\\n     */\\\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is granted `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call, an admin role\\\\n     * bearer except when using {AccessControl-_setupRole}.\\\\n     */\\\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is revoked `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call:\\\\n     *   - if using `revokeRole`, it is the admin role bearer\\\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\\n     */\\\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``'s admin role.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `callerConfirmation`.\\\\n     */\\\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlEnumerable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControlEnumerable} from \\\\\\\"./IAccessControlEnumerable.sol\\\\\\\";\\\\nimport {AccessControl} from \\\\\\\"../AccessControl.sol\\\\\\\";\\\\nimport {EnumerableSet} from \\\\\\\"../../utils/structs/EnumerableSet.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\\\n */\\\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\\\n    using EnumerableSet for EnumerableSet.AddressSet;\\\\n\\\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\\\n     *\\\\n     * Role bearers are not sorted in any particular way, and their ordering may\\\\n     * change at any point.\\\\n     *\\\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\\\n     * you perform all queries on the same block. See the following\\\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\\\n     * for more information.\\\\n     */\\\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\\\n        return _roleMembers[role].at(index);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of accounts that have `role`. Can be used\\\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\\\n     */\\\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\\\n        return _roleMembers[role].length();\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\\\n     */\\\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\\\n        bool granted = super._grantRole(role, account);\\\\n        if (granted) {\\\\n            _roleMembers[role].add(account);\\\\n        }\\\\n        return granted;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\\\n     */\\\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\\\n        bool revoked = super._revokeRole(role, account);\\\\n        if (revoked) {\\\\n            _roleMembers[role].remove(account);\\\\n        }\\\\n        return revoked;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb1c906fcd870fc8dfedb63bfb1bc58b4d2a7469bc13cc44d996fda430693850a\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IAccessControl} from \\\\\\\"../IAccessControl.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\\\n */\\\\ninterface IAccessControlEnumerable is IAccessControl {\\\\n    /**\\\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\\\n     *\\\\n     * Role bearers are not sorted in any particular way, and their ordering may\\\\n     * change at any point.\\\\n     *\\\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\\\n     * you perform all queries on the same block. See the following\\\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\\\n     * for more information.\\\\n     */\\\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of accounts that have `role`. Can be used\\\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\\\n     */\\\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard ERC20 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\\\n */\\\\ninterface IERC20Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC20InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender`\\\\u2019s `allowance`. Used in transfers.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     */\\\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC20InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC20InvalidSpender(address spender);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC721 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\\\n */\\\\ninterface IERC721Errors {\\\\n    /**\\\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\\\n     * Used in balance queries.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721InvalidOwner(address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721NonexistentToken(uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param tokenId Identifier number of a token.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC721InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC721InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC721InvalidOperator(address operator);\\\\n}\\\\n\\\\n/**\\\\n * @dev Standard ERC1155 Errors\\\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\\\n */\\\\ninterface IERC1155Errors {\\\\n    /**\\\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     * @param balance Current balance for the interacting account.\\\\n     * @param needed Minimum amount required to perform a transfer.\\\\n     * @param tokenId Identifier number of a token.\\\\n     */\\\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\\\n     * @param sender Address whose tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidSender(address sender);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\\\n     * @param receiver Address to which tokens are being transferred.\\\\n     */\\\\n    error ERC1155InvalidReceiver(address receiver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator`\\\\u2019s approval. Used in transfers.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     * @param owner Address of the current owner of a token.\\\\n     */\\\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\\\n     * @param approver Address initiating an approval operation.\\\\n     */\\\\n    error ERC1155InvalidApprover(address approver);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\\\n     */\\\\n    error ERC1155InvalidOperator(address operator);\\\\n\\\\n    /**\\\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\\\n     * Used in batch transfers.\\\\n     * @param idsLength Length of the array of token identifiers\\\\n     * @param valuesLength Length of the array of token amounts\\\\n     */\\\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the value of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address to, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\\\n     * caller's tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender's allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 value) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\\\n     * allowance mechanism. `value` is then deducted from the caller's\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\\\n *\\\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\\\n * need to send a transaction, and thus is not required to hold Ether at all.\\\\n *\\\\n * ==== Security Considerations\\\\n *\\\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\\\n * generally recommended is:\\\\n *\\\\n * ```solidity\\\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\\\n *     doThing(..., value);\\\\n * }\\\\n *\\\\n * function doThing(..., uint256 value) public {\\\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\\\n * {SafeERC20-safeTransferFrom}).\\\\n *\\\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\\\n * contracts should have entry points that don't rely on permit.\\\\n */\\\\ninterface IERC20Permit {\\\\n    /**\\\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\\\n     * given ``owner``'s signed approval.\\\\n     *\\\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\\\n     * ordering also apply here.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `deadline` must be a timestamp in the future.\\\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\\\n     * over the EIP712-formatted function arguments.\\\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\\\n     *\\\\n     * For more information on the signature format, see the\\\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\\\n     * section].\\\\n     *\\\\n     * CAUTION: See Security Considerations above.\\\\n     */\\\\n    function permit(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 value,\\\\n        uint256 deadline,\\\\n        uint8 v,\\\\n        bytes32 r,\\\\n        bytes32 s\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the current nonce for `owner`. This value must be\\\\n     * included whenever a signature is generated for {permit}.\\\\n     *\\\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\\\n     * prevents a signature from being used multiple times.\\\\n     */\\\\n    function nonces(address owner) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\\\n     */\\\\n    // solhint-disable-next-line func-name-mixedcase\\\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\\"../IERC20.sol\\\\\\\";\\\\nimport {IERC20Permit} from \\\\\\\"../extensions/IERC20Permit.sol\\\\\\\";\\\\nimport {Address} from \\\\\\\"../../../utils/Address.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @title SafeERC20\\\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\\\n * contract returns false). Tokens that return no value (and instead revert or\\\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\\\n * successful.\\\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\\\n */\\\\nlibrary SafeERC20 {\\\\n    using Address for address;\\\\n\\\\n    /**\\\\n     * @dev An operation with an ERC20 token failed.\\\\n     */\\\\n    error SafeERC20FailedOperation(address token);\\\\n\\\\n    /**\\\\n     * @dev Indicates a failed `decreaseAllowance` request.\\\\n     */\\\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\\\n        forceApprove(token, spender, oldAllowance + value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\\\n     * value, non-reverting calls are assumed to be successful.\\\\n     */\\\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\\\n        unchecked {\\\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\\\n            if (currentAllowance < requestedDecrease) {\\\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\\\n            }\\\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\\\n     */\\\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\\\n\\\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\\\n            _callOptionalReturn(token, approvalCall);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     */\\\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\\\n        // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n        bytes memory returndata = address(token).functionCall(data);\\\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\\\n            revert SafeERC20FailedOperation(address(token));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     *\\\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\\\n     */\\\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\\\n        // and not revert is the subcall reverts.\\\\n\\\\n        (bool success, bytes memory returndata) = address(token).call(data);\\\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\\\n     */\\\\n    error AddressInsufficientBalance(address account);\\\\n\\\\n    /**\\\\n     * @dev There's no code at `target` (it is not a contract).\\\\n     */\\\\n    error AddressEmptyCode(address target);\\\\n\\\\n    /**\\\\n     * @dev A call to an address target failed. The target may have reverted.\\\\n     */\\\\n    error FailedInnerCall();\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        if (address(this).balance < amount) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\\"\\\\\\\");\\\\n        if (!success) {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\\\n     * up by this function (like regular Solidity function calls). However, if\\\\n     * the call reverted with no returned reason, this function reverts with a\\\\n     * {FailedInnerCall} error.\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        if (address(this).balance < value) {\\\\n            revert AddressInsufficientBalance(address(this));\\\\n        }\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\\\n     * unsuccessful call.\\\\n     */\\\\n    function verifyCallResultFromTarget(\\\\n        address target,\\\\n        bool success,\\\\n        bytes memory returndata\\\\n    ) internal view returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            // only check if target is a contract if the call was successful and the return data is empty\\\\n            // otherwise we already know that it was a contract\\\\n            if (returndata.length == 0 && target.code.length == 0) {\\\\n                revert AddressEmptyCode(target);\\\\n            }\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\\\n     * revert reason or with a default {FailedInnerCall} error.\\\\n     */\\\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\\\n        if (!success) {\\\\n            _revert(returndata);\\\\n        } else {\\\\n            return returndata;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\\\n     */\\\\n    function _revert(bytes memory returndata) private pure {\\\\n        // Look for revert reason and bubble it up if present\\\\n        if (returndata.length > 0) {\\\\n            // The easiest way to bubble the revert reason is using memory via assembly\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                let returndata_size := mload(returndata)\\\\n                revert(add(32, returndata), returndata_size)\\\\n            }\\\\n        } else {\\\\n            revert FailedInnerCall();\\\\n        }\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n\\\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\\\n        return 0;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Pausable.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Context} from \\\\\\\"../utils/Context.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    /**\\\\n     * @dev The operation failed because the contract is paused.\\\\n     */\\\\n    error EnforcedPause();\\\\n\\\\n    /**\\\\n     * @dev The operation failed because the contract is not paused.\\\\n     */\\\\n    error ExpectedPause();\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        _requireNotPaused();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        _requirePaused();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the contract is paused.\\\\n     */\\\\n    function _requireNotPaused() internal view virtual {\\\\n        if (paused()) {\\\\n            revert EnforcedPause();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the contract is not paused.\\\\n     */\\\\n    function _requirePaused() internal view virtual {\\\\n        if (!paused()) {\\\\n            revert ExpectedPause();\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC165} from \\\\\\\"./IERC165.sol\\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\\\",\\\"license\\\":\\\"MIT\\\"},\\\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Library for managing\\\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\\\n * types.\\\\n *\\\\n * Sets have the following properties:\\\\n *\\\\n * - Elements are added, removed, and checked for existence in constant time\\\\n * (O(1)).\\\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\\\n *\\\\n * ```solidity\\\\n * contract Example {\\\\n *     // Add the library methods\\\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\\\n *\\\\n *     // Declare a set state variable\\\\n *     EnumerableSet.AddressSet private mySet;\\\\n * }\\\\n * ```\\\\n *\\\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\\\n * and `uint256` (`UintSet`) are supported.\\\\n *\\\\n * [WARNING]\\\\n * ====\\\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\\\n * unusable.\\\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\\\n *\\\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\\\n * array of EnumerableSet.\\\\n * ====\\\\n */\\\\nlibrary EnumerableSet {\\\\n    // To implement this library for multiple types with as little code\\\\n    // repetition as possible, we write it in terms of a generic Set type with\\\\n    // bytes32 values.\\\\n    // The Set implementation uses private functions, and user-facing\\\\n    // implementations (such as AddressSet) are just wrappers around the\\\\n    // underlying Set.\\\\n    // This means that we can only create new EnumerableSets for types that fit\\\\n    // in bytes32.\\\\n\\\\n    struct Set {\\\\n        // Storage of set values\\\\n        bytes32[] _values;\\\\n        // Position is the index of the value in the `values` array plus 1.\\\\n        // Position 0 is used to mean a value is not in the set.\\\\n        mapping(bytes32 value => uint256) _positions;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\\\n        if (!_contains(set, value)) {\\\\n            set._values.push(value);\\\\n            // The value is stored at length-1, but we add 1 to all indexes\\\\n            // and use 0 as a sentinel value\\\\n            set._positions[value] = set._values.length;\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\\\n        uint256 position = set._positions[value];\\\\n\\\\n        if (position != 0) {\\\\n            // Equivalent to contains(set, value)\\\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\\\n            // This modifies the order of the array, as noted in {at}.\\\\n\\\\n            uint256 valueIndex = position - 1;\\\\n            uint256 lastIndex = set._values.length - 1;\\\\n\\\\n            if (valueIndex != lastIndex) {\\\\n                bytes32 lastValue = set._values[lastIndex];\\\\n\\\\n                // Move the lastValue to the index where the value to delete is\\\\n                set._values[valueIndex] = lastValue;\\\\n                // Update the tracked position of the lastValue (that was just moved)\\\\n                set._positions[lastValue] = position;\\\\n            }\\\\n\\\\n            // Delete the slot where the moved value was stored\\\\n            set._values.pop();\\\\n\\\\n            // Delete the tracked position for the deleted slot\\\\n            delete set._positions[value];\\\\n\\\\n            return true;\\\\n        } else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\\\n        return set._positions[value] != 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values on the set. O(1).\\\\n     */\\\\n    function _length(Set storage set) private view returns (uint256) {\\\\n        return set._values.length;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\\\n        return set._values[index];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\\\n        return set._values;\\\\n    }\\\\n\\\\n    // Bytes32Set\\\\n\\\\n    struct Bytes32Set {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\n        return _add(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\\\n        return _remove(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\\\n        return _contains(set._inner, value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\\\n        return _at(set._inner, index);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        bytes32[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    // AddressSet\\\\n\\\\n    struct AddressSet {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(AddressSet storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\\\n        return address(uint160(uint256(_at(set._inner, index))));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        address[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    // UintSet\\\\n\\\\n    struct UintSet {\\\\n        Set _inner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Add a value to a set. O(1).\\\\n     *\\\\n     * Returns true if the value was added to the set, that is if it was not\\\\n     * already present.\\\\n     */\\\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\\\n        return _add(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Removes a value from a set. O(1).\\\\n     *\\\\n     * Returns true if the value was removed from the set, that is if it was\\\\n     * present.\\\\n     */\\\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\\\n        return _remove(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the value is in the set. O(1).\\\\n     */\\\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\\\n        return _contains(set._inner, bytes32(value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of values in the set. O(1).\\\\n     */\\\\n    function length(UintSet storage set) internal view returns (uint256) {\\\\n        return _length(set._inner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\\\n     *\\\\n     * Note that there are no guarantees on the ordering of values inside the\\\\n     * array, and it may change when more values are added or removed.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `index` must be strictly less than {length}.\\\\n     */\\\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\\\n        return uint256(_at(set._inner, index));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Return the entire set in an array\\\\n     *\\\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\\\n     */\\\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\\\n        bytes32[] memory store = _values(set._inner);\\\\n        uint256[] memory result;\\\\n\\\\n        /// @solidity memory-safe-assembly\\\\n        assembly {\\\\n            result := store\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/FloppyVault.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport \\\\\\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\\\\\";\\\\nimport \\\\\\\"@interfaces/IFloppyVault.sol\\\\\\\";\\\\nimport \\\\\\\"@openzeppelin/contracts/utils/Pausable.sol\\\\\\\";\\\\nimport { ERC20Upgradeable, IERC20 } from \\\\\\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\\\\\";\\\\nimport { ContextUpgradeable } from \\\\\\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\\\\\";\\\\nimport { AccessControlEnumerable } from \\\\\\\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\\\\\\\";\\\\nimport { SafeERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\\\\\";\\\\n\\\\ncontract FloppyVault is IFloppyVault, ERC20Upgradeable, Pausable, AccessControlEnumerable {\\\\n  uint256 public constant MAX_PERCENTAGE = 100_000;\\\\n  /// @dev Gap for upgradability.\\\\n  uint256[50] private _____gap;\\\\n  /// @dev Address of the token asset.\\\\n  IERC20 internal _asset;\\\\n  /// @dev Tax percentage Vault would take per deposit or mint request. [0_000 -> 100_000] 0% -> 100%;\\\\n  uint256 internal _taxPercent;\\\\n\\\\n  constructor() Pausable() {\\\\n    _disableInitializers();\\\\n  }\\\\n\\\\n  function initialize(address admin, IERC20 token, uint256 taxPercent) external initializer {\\\\n    if (address(token) == address(0)) revert InvalidAssetAddress();\\\\n    __ERC20_init(\\\\\\\"Floppy Vault\\\\\\\", \\\\\\\"FVT\\\\\\\");\\\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\\\n    _asset = token;\\\\n    _taxPercent = taxPercent;\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _pause();\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    _unpause();\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function deposit(uint256 tokenAmount, address receiver) external whenNotPaused returns (uint256 shares) {\\\\n    shares = previewDeposit(tokenAmount);\\\\n    _deposit(_msgSender(), receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function withdraw(\\\\n    uint256 tokenAmount,\\\\n    address receiver,\\\\n    address owner\\\\n  ) external whenNotPaused returns (uint256 shares) {\\\\n    // Save 2 times SLOAD.\\\\n    uint256 maxTokenAmount = maxWithdraw(owner);\\\\n    if (tokenAmount > maxTokenAmount) {\\\\n      revert ExceededMaxWithdraw(owner, tokenAmount, maxTokenAmount);\\\\n    }\\\\n    shares = previewWithdraw(tokenAmount);\\\\n    _withdraw(_msgSender(), owner, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function mint(uint256 shares, address receiver) external whenNotPaused returns (uint256 tokenAmount) {\\\\n    tokenAmount = previewMint(shares);\\\\n    _deposit(_msgSender(), receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function redeem(uint256 shares, address receiver, address owner) external whenNotPaused returns (uint256 tokenAmount) {\\\\n    uint256 maxShares = maxRedeem(owner);\\\\n    if (shares > maxShares) {\\\\n      revert ExceededMaxRedeem(owner, shares, maxShares);\\\\n    }\\\\n    tokenAmount = previewRedeem(shares);\\\\n    _withdraw(_msgSender(), owner, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function asset() public view returns (address assetTokenAddress) {\\\\n    assetTokenAddress = address(_asset);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function totalAssets() public view returns (uint256 totalManagedAssets) {\\\\n    totalManagedAssets = _asset.balanceOf(address(this));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function maxWithdraw(address user) public view returns (uint256 tokenAmount) {\\\\n    tokenAmount = _convertToAssets(balanceOf(user));\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function maxRedeem(address user) public view returns (uint256 shares) {\\\\n    shares = balanceOf(user);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function convertToShares(uint256 assetAmount) public view returns (uint256 shares) {\\\\n    shares = _convertToShares(assetAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function convertToAssets(uint256 shares) public view returns (uint256 assetAmount) {\\\\n    assetAmount = _convertToAssets(shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewDeposit(uint256 tokenAmount) public view returns (uint256 shares) {\\\\n    shares = _convertToShares(tokenAmount);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewWithdraw(uint256 tokenAmount) public view returns (uint256 shares) {\\\\n    uint256 taxFee = _calTaxFee(tokenAmount);\\\\n    shares = _convertToShares(tokenAmount - taxFee);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewMint(uint256 shares) public view returns (uint256 tokenAmount) {\\\\n    tokenAmount = _convertToAssets(shares);\\\\n  }\\\\n\\\\n  /// @inheritdoc IFloppyVault\\\\n  function previewRedeem(uint256 shares) public view returns (uint256 tokenAmount) {\\\\n    uint256 idealAmount = _convertToAssets(shares);\\\\n    uint256 taxFee = _calTaxFee(idealAmount);\\\\n    tokenAmount = idealAmount - taxFee;\\\\n  }\\\\n\\\\n  function _convertToShares(uint256 tokenAmount) internal view returns (uint256 shares) {\\\\n    shares = (tokenAmount * (totalSupply() + 10 ** _virtualOffset())) / (totalAssets() + 1);\\\\n  }\\\\n\\\\n  function _convertToAssets(uint256 shares) internal view returns (uint256 assetAmount) {\\\\n    assetAmount = (shares * (totalAssets() + 1)) / (totalSupply() + 10 ** _virtualOffset());\\\\n  }\\\\n\\\\n  function _deposit(address caller, address receiver, uint256 tokenAmount, uint256 shares) internal {\\\\n    SafeERC20.safeTransferFrom(_asset, caller, address(this), tokenAmount);\\\\n    _mint(receiver, shares);\\\\n    emit Deposit(caller, receiver, tokenAmount, shares);\\\\n  }\\\\n\\\\n  function _withdraw(address caller, address owner, address receiver, uint256 tokenAmount, uint256 shares) internal {\\\\n    if (caller != receiver) {\\\\n      _spendAllowance(owner, caller, shares);\\\\n    }\\\\n    _burn(owner, shares);\\\\n    SafeERC20.safeTransfer(_asset, receiver, tokenAmount);\\\\n    emit Withdraw(caller, receiver, owner, tokenAmount, shares);\\\\n  }\\\\n\\\\n  function _msgSender() internal view override(Context, ContextUpgradeable) returns (address) {\\\\n    return super._msgSender();\\\\n  }\\\\n\\\\n  function _msgData() internal view override(Context, ContextUpgradeable) returns (bytes calldata) {\\\\n    return super._msgData();\\\\n  }\\\\n\\\\n  function _contextSuffixLength() internal view override(Context, ContextUpgradeable) returns (uint256) {\\\\n    return super._contextSuffixLength();\\\\n  }\\\\n\\\\n  /// @dev Virtual offset to prevent inflation attacks.\\\\n  function _virtualOffset() private pure returns (uint8) {\\\\n    return 3;\\\\n  }\\\\n\\\\n  /// @dev Helper function to calculate tax.\\\\n  function _calTaxFee(uint256 tokenAmount) private view returns (uint256 taxFee) {\\\\n    taxFee = (tokenAmount * _taxPercent) / MAX_PERCENTAGE;\\\\n  }\\\\n\\\\n  /// @dev This function is used for testing purposes, please delete before deploy to production.\\\\n  function exposed_setToken(IERC20 newAsset) external {\\\\n    _asset = newAsset;\\\\n  }\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x413ca083666800e6118c6fbab8e4683c8534e4e6d90d6a924640573aa47fb739\\\",\\\"license\\\":\\\"MIT\\\"},\\\"src/interfaces/IFloppyVault.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.25;\\\\n\\\\nimport { IERC20 } from \\\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\\";\\\\n\\\\ninterface IFloppyVault is IERC20 {\\\\n  /// @dev emit when user deposit ERC20 token.\\\\n  event Deposit(address indexed sender, address indexed owner, uint256 tokenAmount, uint256 shares);\\\\n\\\\n  /// @dev emit when user withdraw ERC20 token.\\\\n  event Withdraw(\\\\n    address indexed sender, address indexed receiver, address indexed owner, uint256 tokenAmount, uint256 shares\\\\n  );\\\\n\\\\n  /// @dev Revert when asset is address(0);\\\\n  error InvalidAssetAddress();\\\\n\\\\n  /// @dev Attempted to withdraw more assets than the max amount for `receiver`.\\\\n  error ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\\\n\\\\n  /// @dev Attempted to redeem more shares than the max amount for `receiver`.\\\\n  error ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\\\n\\\\n  /// @dev Return token address managed by this vault.\\\\n  function asset() external view returns (address assetTokenAddress);\\\\n\\\\n  /// @dev Return total token amout of this vault.\\\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\\\n\\\\n  /// @dev Return maximum amount of tokens user can withdraw.\\\\n  function maxWithdraw(address user) external view returns (uint256 tokenAmount);\\\\n\\\\n  /// @dev Return maximum shares user can burn.\\\\n  function maxRedeem(address user) external view returns (uint256 shares);\\\\n\\\\n  /// @dev Return the ideal amount of shares the Vault would exchange for the amount of tokens recieved.\\\\n  function convertToShares(uint256 assetAmount) external view returns (uint256 shares);\\\\n\\\\n  /// @dev Return the ideal amount of tokens the Vault would exchange for the amount of shares.\\\\n  function convertToAssets(uint256 shares) external view returns (uint256 assetAmount);\\\\n\\\\n  /**\\\\n   * @dev Return the actual shares would be recieved when deposit amount of tokens.\\\\n   * NOTE: this function may not equal to convertToShares because of tax, etc.\\\\n   */\\\\n  function previewDeposit(uint256 tokenAmount) external view returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Return the amount of shares need to burn in order to withdraw exactly an amount of tokens.\\\\n   * NOTE: this function may not equal to convertToShares because of tax, etc.\\\\n   */\\\\n  function previewWithdraw(uint256 tokenAmount) external view returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Return the token amount would need to deposit in order to mint exactly amount of shares.\\\\n   * NOTE: this function may not equal to convertToAssets because of tax, etc.\\\\n   */\\\\n  function previewMint(uint256 shares) external view returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Return the actual token amount would get when burn amount of shares.\\\\n   * NOTE: this function may not equal to convertToAssets because of tax, etc.\\\\n   */\\\\n  function previewRedeem(uint256 shares) external view returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Mint shares to the receiver based on the amount of tokens deposited to this Vault.\\\\n   *\\\\n   * Emit an {Deposit} event.\\\\n   */\\\\n  function deposit(uint256 tokenAmount, address receiver) external returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\\\n   *\\\\n   * Emit an {Withdraw} event.\\\\n   */\\\\n  function withdraw(uint256 tokenAmount, address receiver, address owner) external returns (uint256 shares);\\\\n\\\\n  /**\\\\n   * @dev Mint exactly amount of shares to the receiver by deposited to this Vault.\\\\n   *\\\\n   * Emit an {Deposit} event.\\\\n   */\\\\n  function mint(uint256 shares, address receiver) external returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\\\n   *\\\\n   * Emit an {Withdraw} event.\\\\n   */\\\\n  function redeem(uint256 shares, address receiver, address owner) external returns (uint256 tokenAmount);\\\\n\\\\n  /**\\\\n   * @dev Pauses the Vault functionality.\\\\n   *\\\\n   * Requirements:\\\\n   * - The caller must have the admin role.\\\\n   *\\\\n   */\\\\n  function pause() external;\\\\n\\\\n  /**\\\\n   * @dev Unpauses the registrar controller's functionality.\\\\n   *\\\\n   * Requirements:\\\\n   * - The caller must have the admin role.\\\\n   *\\\\n   */\\\\n  function unpause() external;\\\\n}\\\\n\\\",\\\"keccak256\\\":\\\"0x552efa2f5b11529acff186e733a159ae61f084525ca45d0a151caad19ff96b71\\\",\\\"license\\\":\\\"MIT\\\"}},\\\"version\\\":1}\"",
  "nonce": 0,
  "storageLayout": {
    "storage": [
      {
        "astId": 99637,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 97743,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)97738_storage)"
      },
      {
        "astId": 98117,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)100107_storage)"
      },
      {
        "astId": 100744,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_____gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 100748,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_asset",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IERC20)98993"
      },
      {
        "astId": 100751,
        "contract": "src/FloppyVault.sol:FloppyVault",
        "label": "_taxPercent",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)98993": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)100107_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)100107_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)97738_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)97738_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)100107_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 100106,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)99792_storage"
          }
        ]
      },
      "t_struct(RoleData)97738_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 97735,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 97737,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)99792_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 99787,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 99791,
            "contract": "src/FloppyVault.sol:FloppyVault",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "timestamp": 1724437480,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}